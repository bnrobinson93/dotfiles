# Ultra-fast zshrc - fixed starship initialization

# FAST compinit
autoload -Uz compinit
[[ ! -d "$HOME/.cache/zsh" ]] && mkdir -p "$HOME/.cache/zsh"
compinit -C -d "$HOME/.cache/zsh/zcompdump-$ZSH_VERSION"

# Autostart tmux (keep as-is since it's fast)
if command -v tmux &> /dev/null && \
  [ -n "$PS1" ] && \
  [[ ! "$TERM" =~ screen ]] && \
  [[ ! "$TERM" =~ tmux ]] && \
  [ ! -z "$TMUX" ] &&  \
  ! pstree -s $$ | grep -wqE 'code|language-server'
then
  exec tmux
fi

# Essential environment
export LANG=en_US.UTF-8
if [[ -n $SSH_CONNECTION ]]; then
   type vim >/dev/null 2>&1 && export EDITOR='vim' || export EDITOR='vi'
else
   export EDITOR='nvim'
fi

# Essential PATH - single assignment
export PATH="$PATH:$HOME/.local/bin:$HOME/.pulumi/bin:$HOME/.rd/bin:$HOME/.bun/bin:$HOME/.local/share/pnpm:/home/linuxbrew/.linuxbrew/bin:/opt/homebrew/bin:$HOME/.atuin/bin"

# Essential exports
export ZETTELKASTEN=$HOME/Documents/Vault
export BUN_INSTALL="$HOME/.bun"
export PNPM_HOME="$HOME/.local/share/pnpm"

# Basic settings
set -o emacs
unsetopt no_match

# Essential aliases
alias vi=$EDITOR
grep="grep --color=always"
if type coreutils >/dev/null 2>&1; then
  # Exclude printf for atuin
  coveredCommands=($(coreutils --list | rg -v 'printf'))
  foreach util in $coveredCommands; do
    if type $util >/dev/null 2>&1; then
      alias $util="coreutils $util $@"
    fi
  done
fi

# for history
if type atuin >/dev/null 2>&1; then
  . "$HOME/.atuin/bin/env"
  eval "$(atuin init zsh)"
fi

# SIMPLIFIED STARSHIP - cache init but load synchronously when interactive
if type starship >/dev/null 2>&1; then
  # Only initialize starship for interactive shells to avoid overhead in scripts
  if [[ -o interactive ]]; then
    # Cache starship init to avoid repeated expensive calls
    local starship_cache="$HOME/.cache/zsh/starship_init.zsh"
    
    # Regenerate cache if starship config is newer or cache doesn't exist
    if [[ ! -f "$starship_cache" ]] || [[ "${HOME}/.config/starship.toml" -nt "$starship_cache" ]] 2>/dev/null; then
      starship init zsh > "$starship_cache" 2>/dev/null
    fi
    
    # Source the cached version
    source "$starship_cache" 2>/dev/null
  fi
else
  # Fallback prompt if starship not available
  export PS1='%n@%m:%~%# '
fi

# Essential tool functions
if type "eza" >/dev/null 2>&1; then
  alias ls="eza"
  function la { eza -la -h -smod "$@"; }
  function ll { eza -l -h -smod "$@"; }
  function lt { eza -l -h --color=always -smod "$@" | tail -15; }
  function lss { eza -l -h --color=always -smod "$@" | less -reXF; }
  function l { eza -lah --color=always -smod --icons --git "$@"; }
else
  alias ls="ls --color=tty"
  function la { ls -larth --color=always "$@"; }
  function ll { ls -lrth --color=always "$@"; }
  function lt { ls -larth --color=always "$@"; }
  function lss { ls -lrth --color=always "$@" | less -erXF; }
  function l { ls -ltrha --color=always "$@"; }
fi

type zoxide >/dev/null 2>&1 && eval "$(zoxide init zsh)"

# type rg >/dev/null 2>&1 && alias grep="rg"
# type fd >/dev/null 2>&1 && alias find="fd"
# type bat >/dev/null 2>&1 && alias cat="bat"
# type z > /dev/null 2>&1 && alias cd="z"
# type dust >/dev/null 2>&1 && alias du="dust -B"
type nala >/dev/null 2>&1 && { alias sudo='sudo '; alias apt="nala"; }
alias code='open -a "Visual Studio Code"'

# recording
if type asciinema >/dev/null 2>&1 && type agg >/dev/null 2>&1; then
  function rec {
    asciinema rec /tmp/demo.cast
    agg --theme nord --font-size 16 --font-family "MesloLGL Nerd Font,FiraCode Nerd Font,DankMono Nerd Font" /tmp/demo.cast ~/Pictures/demo.gif
    [ -f ~/Pictures/demo.gif ] && rm /tmp/demo.cast
  }
fi

function ignore {
    for dir in "$@"; do
        [ ! -e "$dir" ] && echo "WARN: $dir not a valid path" && continue
        echo "$dir" >> ~/.gitignore
    done
}

# SYNCHRONOUS deferred loading - no background jobs
zsh_load_deferred() {
  # Only load once
  [[ -n "$ZSH_DEFERRED_LOADED" ]] && return
  
  # History settings
  setopt histignoredups APPEND_HISTORY EXTENDED_HISTORY INC_APPEND_HISTORY
  setopt HIST_FIND_NO_DUPS HIST_IGNORE_SPACE NO_HIST_BEEP SHARE_HISTORY
  SAVEHIST=10000
  HISTSIZE=10000
  HISTFILE=$HOME/.history

  # Load zap if available
  [[ -f "${XDG_DATA_HOME:-$HOME/.local/share}/zap/zap.zsh" ]] && source "${XDG_DATA_HOME:-$HOME/.local/share}/zap/zap.zsh" 2>/dev/null
  
  # Load essential plugins (synchronously to avoid job management issues)
  command -v plug >/dev/null && {
    plug "zsh-users/zsh-autosuggestions" 2>/dev/null
    plug "zsh-users/zsh-syntax-highlighting" 2>/dev/null 
    plug 'none9632/zsh-sudo' 2>/dev/null
  }
  
  # Plugin settings
  ZSH_AUTOSUGGEST_STRATEGY=(history completion)
  zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
  zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
  if test carapace >/dev/null 2>&1; then
    source <(carapace _carapace)
  fi
  ZSH_HIGHLIGHT_MAXLENGTH=300

  # Key bindings setup
  autoload -U up-line-or-beginning-search down-line-or-beginning-search
  zle -N up-line-or-beginning-search
  zle -N down-line-or-beginning-search
  
  # Essential key bindings
  [[ -n "${terminfo[khome]}" ]] && bindkey -- "${terminfo[khome]}" beginning-of-line
  [[ -n "${terminfo[kend]}" ]] && bindkey -- "${terminfo[kend]}" end-of-line
  [[ -n "${terminfo[kcuu1]}" ]] && bindkey -- "${terminfo[kcuu1]}" history-beginning-search-backward
  [[ -n "${terminfo[kcud1]}" ]] && bindkey -- "${terminfo[kcud1]}" history-beginning-search-forward
  [[ -n "${terminfo[kdch1]}" ]] && bindkey -- "${terminfo[kdch1]}" delete-char

  # Colors
  if type vivid >/dev/null 2>&1 && [[ -z "$LS_COLORS" ]]; then
    export LS_COLORS="$(vivid generate catppuccin-mocha)"
    export EZA_COLORS="$LS_COLORS"
  fi

  ZSH_DEFERRED_LOADED=1
}

# Load deferred items immediately for interactive shells
[[ -o interactive ]] && zsh_load_deferred

# MANUAL NVM SETUP - much faster than the plugin
export NVM_DIR="$HOME/.nvm"
nvm() {
    if [[ -z "$NVM_LOADED" ]]; then
        unset -f nvm
        [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"
        export NVM_LOADED=1
        # Now that nvm is loaded, call it directly
        nvm "$@"
        return $?
    fi
    # If we get here, something went wrong - nvm should have been loaded
    echo "Error: nvm failed to load properly"
    return 1
}

node() {
  if [[ -f .nvmrc && -z "$NVM_LOADED" ]]; then
    nvm use 2>/dev/null || true
  fi
  command node "$@"
}

npm() {
  if [[ -f .nvmrc && -z "$NVM_LOADED" ]]; then
    nvm use 2>/dev/null || true
  fi
  command npm "$@"
}

# Auto-use nvm if .nvmrc exists
if [[ -f .nvmrc && -n "$TMUX" ]]; then
  nvm use
fi

# Other lazy loaders
if type kubectl >/dev/null 2>&1; then
  kubectl() {
    if [[ -z $KUBECTL_COMPLETE ]]; then
      source <(command kubectl completion zsh) 2>/dev/null
      KUBECTL_COMPLETE=1
    fi
    command kubectl "$@"
  }
  alias k=kubectl
  alias kgp="kubectl get pods"
fi

if [[ -d /opt/homebrew || -d /home/linuxbrew/.linuxbrew ]]; then
  brew() {
    if [[ -z $BREW_COMPLETE ]]; then
      test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      test -d /opt/homebrew && eval "$(/opt/homebrew/bin/brew shellenv)"
      export HOMEBREW_AUTO_UPDATE_SECS=$((60 * 60 * 24))
      BREW_COMPLETE=1
    fi
    command brew "$@"
  }
fi

if type go >/dev/null 2>&1; then
  go() {
    if [[ -z $GO_ADDED ]]; then
      export PATH="$(command go env GOPATH)/bin:$PATH"
      GO_ADDED=1
    fi
    command go "$@"
  }
fi

# Rust lazy loading
if [[ -d "$HOME/.cargo" ]]; then
  cargo() {
    if [[ -z $CARGO_ADDED ]]; then
      source "$HOME/.cargo/env"
      CARGO_ADDED=1
    fi
    command cargo "$@"
  }
  
  rustc() {
    if [[ -z $CARGO_ADDED ]]; then
      source "$HOME/.cargo/env"
      CARGO_ADDED=1
    fi
    command rustc "$@"
  }
fi

# Ruby lazy loading
if [[ -d $HOME/.rbenv ]]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  rbenv() {
    if [[ -z $RBENV_LOADED ]]; then
      eval "$(command rbenv init - zsh)"
      RBENV_LOADED=1
    fi
    command rbenv "$@"
  }
fi

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/home/brad/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
