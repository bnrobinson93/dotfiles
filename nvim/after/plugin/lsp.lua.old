local lsp = require("lsp-zero")

lsp.preset("recommended")

lsp.ensure_installed({
  'tsserver',
  'rust_analyzer',
})

-- Fix Undefined global 'vim'
lsp.configure('lua-language-server', {
    settings = {
        Lua = {
            diagnostics = {
                globals = { 'vim' }
            }
        }
    }
})


local cmp = require('cmp')
local cmp_select = {behavior = cmp.SelectBehavior.Select}
local cmp_mappings = lsp.defaults.cmp_mappings({
  ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
  ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
  ['<C-y>'] = cmp.mapping.confirm({ select = true }),
  ["<C-Space>"] = cmp.mapping.complete(),
})

cmp_mappings['<Tab>'] = nil
cmp_mappings['<S-Tab>'] = nil

lsp.setup_nvim_cmp({
  mapping = cmp_mappings
})

lsp.set_preferences({
    suggest_lsp_servers = false,
    sign_icons = {
        error = 'E',
        warn = 'W',
        hint = 'H',
        info = 'I'
    }
})

lsp.on_attach(function(client, bufnr)
  local opts = {buffer = bufnr, remap = false}

  vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
  vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
  vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
  vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
  vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
  vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
  vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
  vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
  vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
  vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
end)

lsp.setup()

vim.diagnostic.config({
    virtual_text = true
})
--local lsp = require('lsp-zero')
--
--lsp.preset("recommended")
--
---- Fix Undefined global 'vim'
--lsp.configure('lua_ls', {
--  settings = {
--    Lua = {
--      diagnostics = {
--        globals = { 'vim' }
--      }
--    }
--  }
--})
--
--require('mason').setup({})
--require('mason-lspconfig').setup({
--  ensure_installed = { 'tsserver', 'eslint', 'bashls', 'clangd', 'cssls', 'graphql', 'html', 'jsonls', 'lua_ls',
--    'marksman', 'tailwindcss', 'vimls' },
--  handlers = {
--    lsp.default_setup,
--  },
--})
--
--lsp.set_preferences({
--  suggest_lsp_servers = false,
--  sign_icons = {
--    error = 'E',
--    warn = 'W',
--    hint = 'H',
--    info = 'I'
--  }
--})
--
--local cmp = require('cmp')
--local cmp_select = { behavior = cmp.SelectBehavior.Select }
--local cmp_action = require('lsp-zero').cmp_action()
--require('luasnip.loaders.from_vscode').lazy_load()
--
--cmp.setup({
--  sources = cmp.config.sources({
--    { name = 'nvim_lsp' },
--    { name = 'luasnip' },
--    { name = 'buffer' },
--  }),
--  preselect = 'item',
--  completion = {
--    completeopt = 'menu,menuone,noinsert'
--  },
--  window = {
--    completion = cmp.config.window.bordered(),
--    documentation = cmp.config.window.bordered(),
--  },
--  mapping = cmp.mapping.preset.insert({
--    ['<C-f>']     = cmp_action.luasnip_jump_forward(),
--    ['<C-b>']     = cmp_action.luasnip_jump_backward(),
--
--    ['<C-p>']     = cmp.mapping.select_prev_item(cmp_select),
--    ['<C-n>']     = cmp.mapping.select_next_item(cmp_select),
--    ['<C-y>']     = cmp.mapping.confirm({ select = false }),
--    ['<CR>']      = cmp.mapping.confirm({ select = false }),
--    ['<C-Space>'] = cmp.mapping.complete(),
--  })
--})
--
--lsp.extend_lspconfig()
--
--lsp.on_attach(function(client, bufnr)
--  local opts = { buffer = bufnr, remap = false }
--  lsp.default_keymaps(opts)
--
--  vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)           -- default
--  vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)                 -- default
--  vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--  vim.keymap.set("n", "<leader>vd", function() vim.lsp.buf.open_float() end, opts)   -- Same as gl
--  vim.keymap.set("n", "[d", function() vim.lsp.buf.goto_next() end, opts)            -- default
--  vim.keymap.set("n", "]d", function() vim.lsp.buf.goto_prev() end, opts)            -- default
--  vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts) -- Same as F4
--  vim.keymap.set("n", "<C-space>", function() vim.lsp.buf.code_action() end, opts)   -- Same as F4
--  vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)  -- Same as gr
--  vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)      -- Same as F2
--  vim.keymap.set("n", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)    -- Same as gs
--end)
--
--local nvim_lsp = require("lspconfig")
--
--nvim_lsp["eslint"].setup({
--  on_attach = function(_, bufnr)
--    vim.api.nvim_create_autocmd("BufWritePre", {
--      buffer = bufnr,
--      command = "EslintFixAll",
--    })
--  end
--})
--
--nvim_lsp["tailwindcss"].setup({
--  on_attach = function(_, bufnr)
--    require("tailwindcss-colors").buf_attach(bufnr)
--  end
--})
--
--lsp.format_on_save({
--  format_opts = {
--    async = false,
--    timeout_ms = 10000,
--  },
--  servers = {
--    ['tsserver'] = { 'typescript', 'javascript', 'typescriptreact', 'javascriptreact', 'tailwindcss' },
--  }
--})
--
--lsp.setup()
--
--vim.diagnostic.config({
--  virtual_text = true
--})
